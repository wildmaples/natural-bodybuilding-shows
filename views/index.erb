<!DOCTYPE html>
<html>
<head>
  <title>Natural Bodybuilding Shows</title>
  <style>
    body { font-family: Arial, sans-serif; max-width: 1200px; margin: 0 auto; padding: 20px; }
    .header { border-bottom: 2px solid #333; margin-bottom: 20px; padding-bottom: 10px; }
    .nav { margin-bottom: 20px; }
    .nav a { margin-right: 15px; text-decoration: none; color: #0066cc; }
    .nav a:hover { text-decoration: underline; }
    .status { background: #f0f0f0; padding: 10px; border-radius: 5px; margin-bottom: 20px; }
    .error { background: #ffe6e6; border: 1px solid #ff9999; padding: 10px; border-radius: 5px; color: #cc0000; }
    
    /* Search Interface */
    .search-container { background: #f9f9f9; padding: 20px; border-radius: 8px; margin-bottom: 20px; border: 1px solid #ddd; }
    .search-title { margin: 0 0 15px 0; color: #333; font-size: 1.2em; }
    .search-form { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; align-items: end; }
    .search-group { display: flex; flex-direction: column; }
    .search-group label { font-weight: bold; margin-bottom: 5px; color: #555; }
    .search-group input, .search-group select { padding: 8px 12px; border: 1px solid #ccc; border-radius: 4px; font-size: 14px; }
    .search-group input:focus, .search-group select:focus { outline: none; border-color: #0066cc; box-shadow: 0 0 0 2px rgba(0,102,204,0.2); }
    .search-actions { display: flex; gap: 10px; }
    .search-btn { padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer; font-size: 14px; }
    .clear-btn { background: #666; color: white; }
    .clear-btn:hover { background: #555; }
    .search-results { margin: 10px 0; font-style: italic; color: #666; }
    
    /* Tab Navigation */
    .tab-container { margin-bottom: 20px; }
    .tab-nav { display: flex; border-bottom: 2px solid #ddd; margin-bottom: 20px; }
    .tab-btn { 
      background: none; 
      border: none; 
      padding: 12px 24px; 
      cursor: pointer; 
      font-size: 16px; 
      font-weight: bold;
      color: #666;
      border-bottom: 3px solid transparent;
      transition: all 0.3s ease;
    }
    .tab-btn:hover { background: #f0f0f0; color: #333; }
    .tab-btn.active { 
      color: #0066cc; 
      border-bottom-color: #0066cc; 
      background: #f8f9ff;
    }
    .tab-content { display: none; }
    .tab-content.active { display: block; }
    .tab-stats { 
      font-size: 0.9em; 
      color: #666; 
      font-weight: normal;
      margin-left: 8px;
    }
    
    .show-list { list-style: none; padding: 0; }
    .show-item { padding: 15px; border-bottom: 1px solid #eee; display: flex; justify-content: space-between; align-items: center; transition: background 0.2s ease; }
    .show-item:hover { background: #f9f9f9; }
    .show-item.hidden { display: none; }
    .show-item.past { opacity: 0.9; }
    .show-date { font-weight: bold; color: #666; min-width: 120px; }
    .show-date.past { color: #999; }
    .show-name { flex: 1; margin: 0 15px; }
    .show-federation { padding: 4px 10px; border-radius: 15px; font-size: 0.85em; font-weight: bold; }
    .show-federation.OCB { background: #e6f3ff; color: #0066cc; }
    .show-federation.WNBF { background: #fff2e6; color: #cc6600; }
    .show-federation.past { opacity: 0.7; }
    .show-location { color: #888; font-size: 0.9em; margin-top: 4px; }
    .auto-update { color: #666; font-size: 0.9em; font-style: italic; }
    
    .no-results { text-align: center; padding: 40px 20px; color: #666; font-style: italic; display: none; }
    .empty-tab { text-align: center; padding: 60px 20px; color: #888; }
    .empty-tab h3 { color: #666; margin-bottom: 10px; }
    
    @media (max-width: 768px) {
      .search-form { grid-template-columns: 1fr; }
      .search-actions { justify-content: stretch; }
      .search-btn { flex: 1; }
      .show-item { flex-direction: column; align-items: flex-start; padding: 12px; }
      .show-date { min-width: auto; margin-bottom: 8px; }
      .show-name { margin: 8px 0; }
      .tab-nav { flex-wrap: wrap; }
      .tab-btn { flex: 1; min-width: 120px; }
    }
  </style>
</head>
<body>
  <div class="header">
    <h1>Natural Bodybuilding Shows <%= Date.today.year %></h1>
    <div class="nav">
      <a href="/">Home</a>
      <a href="/about">About</a>
    </div>
  </div>

  <% if error %>
    <div class="error">
      <%= error %>
    </div>
  <% end %>

  <div class="status">
    <% if last_updated %>
      <strong>Last Updated:</strong> <%= last_updated.strftime("%B %d, %Y at %I:%M %p") %>
      <br><strong>Total Shows:</strong> <span id="total-shows"><%= upcoming_count + past_count %></span> 
      (<%= upcoming_count %> upcoming, <%= past_count %> past)
      <br><span class="auto-update">‚è∞ Data automatically updates daily at 6:00 AM</span>
      <% if data_freshness %>
        <br><span class="auto-update">üìä Data freshness: <%= data_freshness %></span>
      <% end %>
    <% else %>
      <strong>Status:</strong> No data available - automatic update will load shows daily at 6:00 AM
    <% end %>
  </div>

  <% if upcoming_shows.any? || past_shows.any? %>
    <!-- Search Interface -->
    <div class="search-container">
      <h3 class="search-title">üîç Search Shows</h3>
      <div class="search-form">
        <div class="search-group">
          <label for="search-name">Show Name</label>
          <input type="text" id="search-name" placeholder="e.g. Naturalmania, Pro Cup">
        </div>
        <div class="search-group">
          <label for="search-location">Location</label>
          <input type="text" id="search-location" placeholder="e.g. New York, California, TX">
        </div>
        <div class="search-group">
          <label for="search-federation">Federation</label>
          <select id="search-federation">
            <option value="">All Federations</option>
            <option value="OCB">OCB</option>
            <option value="WNBF">WNBF</option>
          </select>
        </div>
        <div class="search-group">
          <label for="search-date-from">Date From</label>
          <input type="date" id="search-date-from">
        </div>
        <div class="search-group">
          <label for="search-date-to">Date To</label>
          <input type="date" id="search-date-to">
        </div>
        <div class="search-actions">
          <button type="button" class="search-btn clear-btn" onclick="clearSearch()">Clear All</button>
        </div>
      </div>
      <div class="search-results" id="search-results"></div>
    </div>

    <!-- Tab Navigation -->
    <div class="tab-container">
      <div class="tab-nav">
        <button class="tab-btn active" onclick="switchTab('upcoming')" id="upcoming-tab">
          üóìÔ∏è Upcoming Shows <span class="tab-stats" id="upcoming-count">(<%= upcoming_count %> shows)</span>
        </button>
        <button class="tab-btn" onclick="switchTab('past')" id="past-tab">
          üìÇ Past Shows <span class="tab-stats" id="past-count">(<%= past_count %> shows)</span>
        </button>
      </div>

      <!-- Upcoming Shows Tab -->
      <div class="tab-content active" id="upcoming-content">
        <% if upcoming_shows.any? %>
          <ul class="show-list" id="upcoming-shows">
            <% upcoming_shows.each_with_index do |(name, values), index| %>
              <li class="show-item" 
                  data-name="<%= name.downcase %>" 
                  data-location="<%= (values["location"] || values["state"] || "").downcase %>" 
                  data-date="<%= values["date"].is_a?(Date) ? values["date"].strftime("%Y-%m-%d") : "9999-12-31" %>" 
                  data-federation="<%= values["federation"] || "Unknown" %>">
                <div class="show-date">
                  <%= values["date"].is_a?(Date) ? values["date"].strftime("%b %d, %Y") : values["date"] %>
                </div>
                <div class="show-name">
                  <% if values["url"] && !values["url"].empty? %>
                    <a href="<%= values["url"] %>" target="_blank"><%= name %></a>
                  <% else %>
                    <%= name %>
                  <% end %>
                  <% if values["location"] %>
                    <div class="show-location"><%= values["location"] %></div>
                  <% elsif values["state"] %>
                    <div class="show-location"><%= values["state"] %></div>
                  <% end %>
                </div>
                <div class="show-federation <%= values["federation"] || "Unknown" %>">
                  <%= values["federation"] || "Unknown" %>
                </div>
              </li>
            <% end %>
          </ul>
        <% else %>
          <div class="empty-tab">
            <h3>No upcoming shows found</h3>
            <p>Check back later as new shows are added to the schedule.</p>
          </div>
        <% end %>
      </div>

      <!-- Past Shows Tab -->
      <div class="tab-content" id="past-content">
        <% if past_shows.any? %>
          <ul class="show-list" id="past-shows">
            <% past_shows.each_with_index do |(name, values), index| %>
              <li class="show-item past" 
                  data-name="<%= name.downcase %>" 
                  data-location="<%= (values["location"] || values["state"] || "").downcase %>" 
                  data-date="<%= values["date"].is_a?(Date) ? values["date"].strftime("%Y-%m-%d") : "9999-12-31" %>" 
                  data-federation="<%= values["federation"] || "Unknown" %>">
                <div class="show-date past">
                  <%= values["date"].is_a?(Date) ? values["date"].strftime("%b %d, %Y") : values["date"] %>
                </div>
                <div class="show-name">
                  <% if values["url"] && !values["url"].empty? %>
                    <a href="<%= values["url"] %>" target="_blank"><%= name %></a>
                  <% else %>
                    <%= name %>
                  <% end %>
                  <% if values["location"] %>
                    <div class="show-location"><%= values["location"] %></div>
                  <% elsif values["state"] %>
                    <div class="show-location"><%= values["state"] %></div>
                  <% end %>
                </div>
                <div class="show-federation <%= values["federation"] || "Unknown" %> past">
                  <%= values["federation"] || "Unknown" %>
                </div>
              </li>
            <% end %>
          </ul>
        <% else %>
          <div class="empty-tab">
            <h3>No past shows found</h3>
            <p>Past shows will appear here after their event dates have passed.</p>
          </div>
        <% end %>
      </div>
    </div>

    <div class="no-results" id="no-results">
      <h3>No shows found</h3>
      <p>Try adjusting your search criteria or clearing the filters.</p>
    </div>

    <script>
      let currentTab = 'upcoming';
      let totalShows = <%= upcoming_count + past_count %>;
      let upcomingOriginalCount = <%= upcoming_count %>;
      let pastOriginalCount = <%= past_count %>;

      // Set up real-time search
      document.addEventListener('DOMContentLoaded', function() {
        document.getElementById('search-name').addEventListener('input', performSearch);
        document.getElementById('search-location').addEventListener('input', performSearch);
        document.getElementById('search-federation').addEventListener('change', performSearch);
        document.getElementById('search-date-from').addEventListener('change', performSearch);
        document.getElementById('search-date-to').addEventListener('change', performSearch);
      });

      function switchTab(tabName) {
        currentTab = tabName;
        
        // Update tab buttons
        document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
        document.getElementById(tabName + '-tab').classList.add('active');
        
        // Update tab content
        document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
        document.getElementById(tabName + '-content').classList.add('active');
        
        // Refresh search results for current tab
        performSearch();
      }

      function performSearch() {
        const nameFilter = document.getElementById('search-name').value.toLowerCase();
        const locationFilter = document.getElementById('search-location').value.toLowerCase();
        const federationFilter = document.getElementById('search-federation').value;
        const dateFromFilter = document.getElementById('search-date-from').value;
        const dateToFilter = document.getElementById('search-date-to').value;

        let upcomingVisible = 0;
        let pastVisible = 0;

        // Filter upcoming shows
        const upcomingItems = document.querySelectorAll('#upcoming-shows .show-item');
        upcomingItems.forEach(item => {
          const isVisible = matchesFilters(item, nameFilter, locationFilter, federationFilter, dateFromFilter, dateToFilter);
          if (isVisible) {
            item.classList.remove('hidden');
            upcomingVisible++;
          } else {
            item.classList.add('hidden');
          }
        });

        // Filter past shows
        const pastItems = document.querySelectorAll('#past-shows .show-item');
        pastItems.forEach(item => {
          const isVisible = matchesFilters(item, nameFilter, locationFilter, federationFilter, dateFromFilter, dateToFilter);
          if (isVisible) {
            item.classList.remove('hidden');
            pastVisible++;
          } else {
            item.classList.add('hidden');
          }
        });

        // Update results info
        const currentVisible = currentTab === 'upcoming' ? upcomingVisible : pastVisible;
        updateSearchResults(currentVisible, upcomingVisible + pastVisible);
        
        // Update tab counts
        document.getElementById('upcoming-count').textContent = `(${upcomingVisible} shows)`;
        document.getElementById('past-count').textContent = `(${pastVisible} shows)`;
      }

      function matchesFilters(item, nameFilter, locationFilter, federationFilter, dateFromFilter, dateToFilter) {
        const name = item.dataset.name;
        const location = item.dataset.location;
        const federation = item.dataset.federation;
        const date = item.dataset.date;

        // Name filter
        if (nameFilter && !name.includes(nameFilter)) {
          return false;
        }

        // Location filter
        if (locationFilter && !location.includes(locationFilter)) {
          return false;
        }

        // Federation filter
        if (federationFilter && federation !== federationFilter) {
          return false;
        }

        // Date range filter
        if (dateFromFilter && date !== "9999-12-31" && date < dateFromFilter) {
          return false;
        }
        if (dateToFilter && date !== "9999-12-31" && date > dateToFilter) {
          return false;
        }

        return true;
      }

      function updateSearchResults(currentTabVisible, totalVisible) {
        const resultsElement = document.getElementById('search-results');
        const noResultsElement = document.getElementById('no-results');
        const totalShowsElement = document.getElementById('total-shows');

        if (totalVisible === totalShows) {
          resultsElement.textContent = '';
        } else {
          resultsElement.textContent = `Showing ${totalVisible} of ${totalShows} shows total`;
        }

        // Update total shows counter
        totalShowsElement.textContent = totalVisible;

        // Show/hide no results message (only for current tab)
        if (currentTabVisible === 0 && (document.getElementById('search-name').value || 
            document.getElementById('search-location').value || 
            document.getElementById('search-federation').value ||
            document.getElementById('search-date-from').value || 
            document.getElementById('search-date-to').value)) {
          noResultsElement.style.display = 'block';
        } else {
          noResultsElement.style.display = 'none';
        }
      }

      function clearSearch() {
        document.getElementById('search-name').value = '';
        document.getElementById('search-location').value = '';
        document.getElementById('search-federation').value = '';
        document.getElementById('search-date-from').value = '';
        document.getElementById('search-date-to').value = '';
        
        // Show all shows
        document.querySelectorAll('.show-item').forEach(item => {
          item.classList.remove('hidden');
        });

        updateSearchResults(currentTab === 'upcoming' ? upcomingOriginalCount : pastOriginalCount, totalShows);
        
        // Reset tab counts
        document.getElementById('upcoming-count').textContent = `(${upcomingOriginalCount} shows)`;
        document.getElementById('past-count').textContent = `(${pastOriginalCount} shows)`;
        
        // Hide no results
        document.getElementById('no-results').style.display = 'none';
      }
    </script>

  <% else %>
    <p>No shows currently available. Data will be automatically updated daily at 6:00 AM.</p>
  <% end %>
</body>
</html>

